@use "sass:map" as map;
@use "sass:list" as list;
@use "sass:meta" as meta;
@use "./helpers" as helpers;

$breakpoints: (
  "xs": 375px,
  "sm": 640px,
  "md": 768px,
  "lg": 1024px,
  "xl": 1366px,
);

$font-names: "GothamPro", "Montserrat", "Firasans";

$font-weigths: (
  "regular": 400,
  "bold": 700,
);

$text-sizes: (
  biggest: 1.7rem,
  big: 1.6rem,
  medium: 1.4rem,
  small: 1.3rem,
  smallest: 1.2rem,
);

$colors: (
  object: (
    primary: #8500d2,
    secondary: #27c7c5,
    detail: (
      accent: #000000,
      additional: #ffffff,
    ),
  ),
  text: (
    primary: #ffffff,
    secondary: (
      default: #74797e,
      accent: #333b42,
      additional: #8297a7,
    ),
  ),
);

$default-size-coefficients: (
  lg: 0.8,
  md: 0.7,
);

$default-padding: 2rem;

$durations: (
  long: 2s,
  calm: 1s,
  short: 0.5s,
);

$default-transition-duration: map.get($durations, short);

/* --------------------------------- Mixins --------------------------------- */

/**
* Миксин для создания медиа-запросов
* @param {Map|String} $condition - условие медиа-запроса:
* 
* @example
*
* @include mq(md) -> @media (max-width: 768px)
*
* @include mq((min-height: 375px, min-width: md)) -> 
* -> @media (min-height: 375px) and (min-width: 768px)
*/
@mixin mq($condition) {
  $query: "";

  @if meta.type-of($condition) == map {
    // если $condition - map
    $rules: map.keys($condition);
    $length: list.length($rules);

    @for $i from 1 through $length {
      $rule: list.nth($rules, $i);
      $breakpoint: map.get($condition, $rule);

      $query: $query +
        "(#{$rule}: #{map.get($breakpoints, $breakpoint) or $breakpoint})";

      @if $i < $length {
        $query: $query + " and ";
      }
    }
  } @else {
    // если $condition - свойство $breakpoints
    $query: "(max-width: #{map.get($breakpoints, $condition)})";
  }

  @media #{$query} {
    @content;
  }
}

// подключение шрифтов
@mixin set-font($file-name, $font-name, $font-weight) {
  @font-face {
    font-family: $font-name;
    font-display: swap;
    src: url("@styles/fonts/#{$file-name}.woff") format("woff"),
      url("@styles/fonts/#{$file-name}.woff2") format("woff2");
    font-weight: #{$font-weight};
    font-style: "normal";
  }
}

/**
 * Центрирование элементов флекс-блоков
 *
 * @param $axis - ось центрирования: 
 * x, y, "" (по умолчанию - по обеим осям)
 *
 * @param $direction - направление оси: 
 * row (по умолчанию), column
 */
@mixin set-flex-center($axis: "", $direction: row) {
  display: flex;
  flex-direction: $direction;

  $properties: (
    x: justify-content,
    y: align-items,
  );

  @if $direction == column {
    $properties: (
      x: align-items,
      y: justify-content,
    );
  }

  //   если нет уточнений по оси,
  //   то центририрование по обеим осям
  @if $axis != y {
    #{map.get($properties, x)}: center;
  }
  @if $axis != x {
    #{map.get($properties, y)}: center;
  }
}

/**
 * Вычисление центра по стороне
 * (чтобы не "занимать" transform)
 *
 * @param $size - величина стороны
 */
@function get-center($size) {
  @return calc(50% - ($size / 2));
}

/**
 * Установка меняющегося размером свойства
 *
 * @param $value - значение свойства по умолчанию
 *
 * @param $property - свойство
 *
 * @param {Map} $coefficients - брейкоинты и коэффициенты
 */
@mixin set-responsive-property(
  $value,
  $property: "padding",
  $coefficients: $default-size-coefficients
) {
  & {
    #{$property}: $value;
  }

  @each $breakpoint, $coefficient in $coefficients {
    @include mq($breakpoint) {
      @if meta.type-of($value) == list {
        $list-space: ();

        @each $value in $value {
          $list-space: list.append($list-space, $value * $coefficient);
        }

        #{$property}: $list-space;
      } @else {
        #{$property}: $value * $coefficient;
      }
    }
  }
}

/**
 * Установка позиции боковой иконки
 *
 * @param $icon-size - величина иконки
 *
 * @param $side - сторона от контента: left, right (по умолчанию)
 *
 * @param $from-border - расстояние от границы блока
 * (по умолчанию $default-padding)
 *
 * @param $from-content - расстояние от содержимого блока
 * (по умолчанию $default-padding)
 *
 * @param $responsive - нужна ли дефолтная адаптивность
 * (по умолчанию true): 
 * set-responsive-property($coefficients: $default-size-coefficients)
 *
 * @param $icon-block - блок с иконкой (по умолчанию иконка без блока)
 */
@mixin set-side-icon-position(
  $icon-size,
  $side: "right",
  $from-border: $default-padding,
  $from-content: $default-padding,
  $responsive: true,
  $icon-block: ""
) {
  & {
    position: relative;
  }

  @if $side != "left" and $side != "right" {
    $side: "right";
  }

  @if $from-content != null {
    $side-padding: calc($from-border + $icon-size + $from-content);

    @if $responsive {
      @include set-responsive-property($side-padding, "padding-#{$side}");
    } @else {
      padding-#{$side}: $side-padding;
    }
  }

  & > #{$icon-block} svg {
    @include make-square($icon-size);

    position: absolute;
    top: get-center($icon-size);

    @if $responsive {
      @include set-responsive-property($from-border, $side);
    } @else {
      #{$side}: $from-border;
    }
  }
}

/**
 * Установка размеров равностороннего элемента
 *
 * @param $size - величина стороны
 */
@mixin make-square($size) {
  width: $size;
  height: $size;
}

/**
 * Отмена скругления стороны 
 * (для создания полукруга, например)
 *
 * @param $side - сторона
 */
@mixin sharpen-side($side) {
  @if $side == "top" or $side == "bottom" {
    & {
      border-#{$side}-left-radius: 0;
      border-#{$side}-right-radius: 0;
    }
  } @else if $side == "left" or $side == "right" {
    & {
      border-top-#{$side}-radius: 0;
      border-bottom-#{$side}-radius: 0;
    }
  }
}

/**
 * Добавление transition дефолтной длительности
 *
 * @param $property - свойство, которое будет анимироваться
 */
@mixin set-default-duration($property) {
  & {
    transition-duration: $default-transition-duration;
    transition-property: $property;
  }
}

/* ------------------------------ Placeholders ------------------------------ */

// генерация placeholder-ов из названия шрифта и веса
// (например, %GothamPro-regular)
@each $fname in $font-names {
  @each $fweight-name, $fweight-val in $font-weigths {
    %#{$fname}-#{$fweight-name} {
      font-family: $fname, sans-serif;
      font-weight: $fweight-val;
    }
  }
}

// генерация placeholder-ов из размера текста
// (например, %text-medium)
@include helpers.create-property-placeholders($text-sizes, font-size, "text");

// генерация placeholder-ов для фона
// (например, %background-primary)
@include helpers.create-property-placeholders(
  map.get($colors, object),
  background-color,
  "background"
);

// генерация placeholder-ов для цвета текста
// (например, %color-secondary-accent)
@include helpers.create-property-placeholders(
  map.get($colors, text),
  color,
  "color"
);

%radius-softened {
  border-radius: 0.2rem;
}

%radius-rounded {
  border-radius: 0.5rem;
}

%radius-round {
  border-radius: 50%;
}

%pointed {
  &:not(:disabled) {
    cursor: pointer;
  }
}

%overlay {
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

%container {
  pointer-events: none;

  & > * {
    pointer-events: auto;
  }
}
